openapi: 3.0.1
info:
  title: Jackal-Game Enterprise Service
  version: v1
servers:
  - url: http://localhost:8080
    description: local server url
paths:
  /api/auth/yandex:
    post:
      tags:
        - authentication-controller
      summary: authenticate user via yandex-api access token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          description: Returns always with 'OK' in responseStatus and not empty accessToken and refreshToken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
        '401':
          description: Returns with error code in responseStatus (YANDEX_PROVIDER_ACCESS_ERROR) if an error occurred when contacting an external provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"

  /api/auth/vk:
    post:
      tags:
        - authentication-controller
      summary: authenticate user via vk-api access token

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          description: Returns always with 'OK' in responseStatus and not empty accessToken and refreshToken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
        '401':
          description: Returns with error code in responseStatus (VK_PROVIDER_ACCESS_ERROR) if an error occurred when contacting an external provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"

  /api/refresh:
    post:
      tags:
        - refresh-conroller
      summary: refresh expirated access token by pair access + refresh tokens
      description: after refreshing a new pair is issued and old refresh token can't be used again
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
        required: true
      responses:
        '200':
          description: Returns always with 'OK' in responseStatus and not empty new pair of accessToken and refreshToken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshResponse"
        '401':
          description: "Returns always with error const in responseStatus and empty new pair of accessToken and refreshToken. 
          - INVALID_ACCESS_REFRESH_PAIR means that those pair refresh and access wasn't issued on the same time: it can be symbol of system failure (maybe client, maybe server).
          - ALREADY_USED_REFRESH means that those pair refresh and access was used early. This can be if the refresh was stolen (it is worth reporting this to the client) or if the user has recently pressed the button to log out from all devices.
          - INVALID_REFRESH means that the refresh was not issued by this service"

  /api/lobby/create:
    post:
      tags:
        - lobby-controller
      summary: create lobby

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLobbyClientRequest"
        required: true
      responses:
        '200':
          description: If the response status is OK, then the lobby was successfully created and the information for the web-socket connection and host token are returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateLobbyResponse"

  /api/lobby/join:
    post:
      tags:
        - lobby-controller
      summary: join to lobby and get information for web socket connection

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JoinLobbyClientRequest"
        required: true
      responses:
        '200':
          description: If the response status is OK, then user was successfully joined to lobby. The information for the web-socket connection and user token are returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JoinLobbyResponse"

  /api/lobby/connection-info:
    get:
      tags:
        - lobby-controller
      summary: get info about web socket connection for reconnect

      responses:
        '200':
          description: If the response status is OK, the information for the web-socket connection and user token are returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLobbyConnectionInfoResponse"

  /api/lobby/all:
    get:
      tags:
      - lobby-controller
      summary: get info about all lobbies

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllLobbiesClientResponse"

  /api/user/info?userId={userId}:
    get:
      tags:
        - user-controller
      summary: get info about user by user id
      parameters:
        - name: userId
          in: path
          required: true
      responses:
        '200':
          description: If the response status is OK, the information about user is returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserInfoResponse"


components:
  schemas:
    AuthenticationRequest:
      type: object
      required:
        - accessToken
      properties:
        accessToken:
          type: string
          summary: "external access token from yandex or vk"

    AuthenticationResponse:
      type: object
      properties:
        accessToken:
          type: string
          summary: "internal jwt access token"
        refreshToken:
          type: string
          summary: "internal jwt refresh token (on refresh using with access token)"
        responseStatus:
          type: string
          enum:
            - OK
            - VK_PROVIDER_ACCESS_ERROR
            - YANDEX_PROVIDER_ACCESS_ERROR
            -
    RefreshRequest:
      type: object
      required:
        - accessToken
        - refreshToken
      properties:
        accessToken:
          type: string
          summary: "expired access token"
        refreshToken:
          type: string
          summary: "refresh token which be issued with expired access"

    RefreshResponse:
      type: object
      properties:
        accessToken:
          type: string
          summary: "internal jwt access token"
        refreshToken:
          type: string
          summary: "internal jwt refresh token (on refresh using with access token)"
        responseStatus:
          type: string
          enum:
            - OK
            - INVALID_ACCESS_REFRESH_PAIR
            - ALREADY_USED_REFRESH
            - INVALID_REFRESH

    CreateLobbyClientRequest:
      type: object
      required:
        - lobbyTitle
      properties:
        lobbyTitle:
          type: string
          summary: "the title of the lobby being created"
        lobbyPassword:
          type: string
          summary: "If value is null lobby is created public"

    CreateLobbyResponse:
      type: object
      properties:
        webSocketInfo:
          type: object
          properties:
            subscriptionGroupUrl:
              type: string
            subscriptionUserUrl:
              type: string
        userToken:
          type: string
          summary: "Token is used to identify the user in the lobby service. Stores user id and lobby id"
        responseStatus:
          type: string
          enum:
            - OK
            - HOST_ALREADY_IN_LOBBY
            - NOT_UNIQUE_LOBBY_TITLE

    JoinLobbyClientRequest:
      type: object
      required:
        - lobbyTitle
      properties:
        lobbyTitle:
          type: string
        lobbyPassword:
          type: string
          summary: "if the lobby is public no password is needed"

    JoinLobbyResponse:
      type: object
      properties:
        webSocketInfo:
          type: object
          properties:
            subscriptionLobbyUrl:
              type: string
            subscriptionUserUrl:
              type: string
        userToken:
          type: string
          summary: "Token is used to identify the user in the lobby service. Stores user id and lobby id"
        responseStatus:
          type: string
          enum:
            - OK
            - USER_ALREADY_IN_LOBBY
            - LOBBY_NOT_FOUND
            - WRONG_PASSWORD
            - USER_IN_LOBBY_BLACK_LIST

    GetLobbyConnectionInfoResponse:
      type: object
      properties:
        webSocketInfo:
          type: object
          properties:
            subscriptionLobbyUrl:
              type: string
            subscriptionUserUrl:
              type: string
        userToken:
          type: string
          summary: "Token is used to identify the user in the lobby service. Stores user id and lobby id"
        responseStatus:
          type: string
          enum:
            - OK
            - USER_NOT_IN_ANY_LOBBY

    GetAllLobbiesClientResponse:
        type: object
        properties:
          lobbies:
            type: array
            items:
              type: object
              properties:
                title:
                  type: string
                isPublic:
                  type: boolean
                members:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      pictureUrl:
                        type: string
                      isHost:
                        type: boolean
                      status:
                        type: string
                        enum:
                          - NOT_CONNECTED
                          - READY
                          - NOT_READY
                          - IN_GAME
                gameMode:
                  type: object
                  properties:
                    id:
                      type: number
                    title:
                      type: string
                    maxPlayerNumber:
                      type: number
                    minPlayerNumber:
                      type: number
                    game:
                      type: object
                      properties:
                        id:
                          type: number
                        title:
                          type: string
                        serviceAddress:
                          type: string
                        clientAddress:
                          type: string
          responseStatus:
            type: string
            enum:
              - OK

    GetUserInfoResponse:
      type: object
      properties:
        userName:
          type: string
        userPictureUrl:
          type: string
        responseStatus:
          type: string
          enum:
            - OK
            - USER_NOT_FOUND